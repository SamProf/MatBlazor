<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MatBlazor</name>
    </assembly>
    <members>
        <member name="P:MatBlazor.BaseMatDomComponent.Attributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to the created element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatDomComponent.Ref">
            <summary>
            Returned ElementRef reference for DOM element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatDomComponent.Class">
            <summary>
            Specifies one or more classnames for an DOM element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatDomComponent.Style">
            <summary>
            Specifies an inline style for an DOM element.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatInputComponent`1">
            <summary>
            Base class for any input control that optionally supports an <see cref="P:MatBlazor.BaseMatInputComponent`1.EditContext"/>.
            </summary>
            <typeparam name="T">the natural type of the input's value</typeparam>
        </member>
        <member name="P:MatBlazor.BaseMatInputComponent`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            @bind-Value="model.PropertyName"
            </example>
        </member>
        <member name="P:MatBlazor.BaseMatInputComponent`1.ValueChanged">
            <summary>
            Gets or sets a callback that updates the bound value.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatInputComponent`1.ValueExpression">
            <summary>
            Gets or sets an expression that identifies the bound value.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatInputComponent`1.EditContext">
            <summary>
            Gets the associated <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatInputComponent`1.FieldIdentifier">
            <summary>
            Gets the <see cref="P:MatBlazor.BaseMatInputComponent`1.FieldIdentifier"/> for the bound value.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatInputComponent`1.CurrentValue">
            <summary>
            Gets or sets the current value of the input.
            </summary>
        </member>
        <member name="M:MatBlazor.BaseMatInputComponent`1.ClearValidationErrors">
            <summary>
            Clears validation errors
            Used when value is set programatically, removing parse errors
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatInputComponent`1.FieldClass">
            <summary>
            Gets a string that indicates the status of the field being edited. This will include
            some combination of "modified", "valid", or "invalid", depending on the status of the field.
            </summary>
        </member>
        <member name="M:MatBlazor.BaseMatInputComponent`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="P:MatBlazor.BaseMatInputTextElementComponent`1.CurrentValueAsString">
            <summary>
            Gets or sets the current value of the input, represented as a string.
            </summary>
        </member>
        <member name="M:MatBlazor.BaseMatInputTextElementComponent`1.FormatValueAsString(`0)">
            <summary>
            Formats the value as a string. Derived classes can override this to determine the formating used for <see cref="P:MatBlazor.BaseMatInputTextElementComponent`1.CurrentValueAsString"/>.
            </summary>
            <param name="value">The value to format.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:MatBlazor.BaseMatInputTextElementComponent`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <summary>
            Parses a string to create an instance of <typeparamref name="T"/>. Derived classes can override this to change how
            <see cref="P:MatBlazor.BaseMatInputTextElementComponent`1.CurrentValueAsString"/> interprets incoming values.
            </summary>
            <param name="value">The string value to be parsed.</param>
            <param name="result">An instance of <typeparamref name="T"/>.</param>
            <param name="validationErrorMessage">If the value could not be parsed, provides a validation error message.</param>
            <returns>True if the value could be parsed; otherwise false.</returns>
        </member>
        <member name="P:MatBlazor.MatAccordion.HideToggle">
            <summary>
            Hides toggle icon for all expansion panel summaries in the accordion
            </summary>
        </member>
        <member name="P:MatBlazor.MatAccordion.LazyRendering">
            <summary>
            Enables lazy rendering for all expansion panel details in the accordion.
            </summary>
        </member>
        <member name="T:MatBlazor.MatExpansionPanel">
            <summary>
            MatExpansionPanel provides an expandable details-summary view.
            </summary>
        </member>
        <member name="P:MatBlazor.MatExpansionPanel.HideToggle">
            <summary>
            Hides the toggle icon in the expansion panel summary
            </summary>
        </member>
        <member name="P:MatBlazor.MatExpansionPanel.LazyRendering">
            <summary>
            Enables lazy rendering of the expansion panel details.
            </summary>
        </member>
        <member name="T:MatBlazor.MatAppBar">
            <summary>
            Acts as a container for items such as application title, navigation icon, and action items.
            </summary>
        </member>
        <member name="T:MatBlazor.MatAppBarAdjust">
            <summary>
            
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatAutocompleteList`1">
            <summary>
            The autocomplete is a normal text input enhanced by a panel of suggested options.
            </summary>
            <typeparam name="TItem">Type of element type.</typeparam>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.NumberOfElementsInPopup">
            <summary>
            Maximum number of elements displayed in the popup
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.Label">
            <summary>
            The label of the TextField
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.Icon">
            <summary>
            The Icon displayed as the leading icon for the TextField
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.StringValue">
            <summary>
            The StringValue displayed in the TextField
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.Value">
            <summary>
            The value to be used to pre-select an item from the list
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.ValueChanged">
            <summary>
            ValueChanged is fired when the value is selected(by clicking on an element in the popup)
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.ItemTemplate">
            <summary>
            ItemTemplate is used to render the elements in the popup if no template is given then the string value of the objects is displayed..
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.CustomStringSelector">
            <summary>
            This function is used to select the string part from the item, used both for filtering and displaying if no ItemTemplate is defined.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.Items">
            <summary>
            The collection which should be rendered and filtered
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.Outlined">
            <summary>
            If this parameter is true then the style of the textbox is outlined see `MatTextfield`
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.OnOpenedChanged">
            <summary>
            OnOpenedChanged is fired when the popup dialog is opened or close and the parameter indicates whenever is it open, the default value is false
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.OnTextChanged">
            <summary>
            OnTextChanged is fired when the string value is changed(when an input occurs in the textfield or when an item is selected)
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.ShowClearButton">
            <summary>
            This value indicates if the clear button(using a trailing icon) should be displayed, which can clear the entire text and the selected value), the default value is false
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocompleteList`1.FullWidth">
            <summary>
            This value indicates if the textfield and the dialog will be or not displayed in the full screen, the default value is false
            </summary>
        </member>
        <member name="M:MatBlazor.BaseMatAutocompleteList`1.ClearText(System.EventArgs)">
            <summary>
            Clears current value of the autocomplete text
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`2.ItemValueSelector">
            <summary>
            This function is used to select the string part from the item, used both for filtering and displaying if no ItemTemplate is defined.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`2.NumberOfElementsInPopup">
            <summary>
            Maximum number of elements displayed in the popup
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`2.ItemTemplate">
            <summary>
            ItemTemplate is used to render the elements in the popup if no template is given then the string value of the objects is displayed..
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.OnClick">
            <summary>
            Event occurs when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.OnClickStopPropagation">
            <summary>
            Stop propagation of the OnClick event
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.CommandParameter">
            <summary>
            Command parameter.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.Href">
            <summary>
            Link to a url when clicked.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.ForceLoad">
            <summary>
            Force browser to redirect outside component router-space.
            </summary>
            
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.Target">
            <summary>
            Target of Link when clicked.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.Raised">
            <summary>
            Link has raised style.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.Unelevated">
            <summary>
            Link has unelevated style.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.Outlined">
            <summary>
            Link has outlined style.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.Dense">
            <summary>
            Link has dense style.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.Disabled">
            <summary>
            Link is disabled.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.Icon">
            <summary>
            Specifies the link's icon.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.TrailingIcon">
            <summary>
            Specifies if icon has trailing position.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButtonLink.ChildContent">
            <summary>
            Inline label of Button.
            </summary>
        </member>
        <member name="T:MatBlazor.MatButton">
            <summary>
            Buttons communicate an action a user can take.
            They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.OnClick">
            <summary>
            Event occurs when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.OnClickStopPropagation">
            <summary>
            Stop propagation of the OnClick event
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Command">
            <summary>
            Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.CommandParameter">
            <summary>
            Command parameter.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Link">
            <summary>
            Link to a url when clicked.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.ForceLoad">
            <summary>
            Force browser to redirect outside component router-space.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Target">
            <summary>
            Target of Link when clicked.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Raised">
            <summary>
            Button has raised style.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Unelevated">
            <summary>
            Button has unelevated style.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Outlined">
            <summary>
            Button has outlined style.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Dense">
            <summary>
            Button has dense style.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Disabled">
            <summary>
            Button is disabled.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Icon">
            <summary>
            Specifies an button's icon.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.TrailingIcon">
            <summary>
            Specifies if icon has trailing position.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.Label">
            <summary>
            Text label of Button.
            </summary>
        </member>
        <member name="P:MatBlazor.MatButton.ChildContent">
            <summary>
            Inline label of Button.
            </summary>
        </member>
        <member name="T:MatBlazor.MatCard">
            <summary>
            Card component for Blazor contain content and actions about a single subject. 
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatCheckboxInternal`1">
            <summary>
            Material Design Checkboxes for Blazor, allow the user to select multiple options from a set. 
            </summary>
            <typeparam name="TValue">bool, bool?</typeparam>
        </member>
        <member name="P:MatBlazor.MatChipSet.Choice">
            <summary>
            Allows single selection from a set of options. If combined with Filter the selected value can be unselected.
            </summary>
        </member>
        <member name="P:MatBlazor.MatChipSet.Filter">
            <summary>
             Enables multiple-choice selection from the set of chips. Chips must be "Checkable" for this to work.
            </summary>
        </member>
        <member name="T:MatBlazor.MatChip">
            <summary>
            Chips are compact elements that allow users to enter information, select a choice, filter content, or trigger an action.
            </summary>
        </member>
        <member name="P:MatBlazor.MatChip.LeadingIcon">
            <summary>
            Optional icon, displayed before the label.
            </summary>
        </member>
        <member name="P:MatBlazor.MatChip.TrailingIcon">
            <summary>
            A trailing icon comes with the functionality to remove the chip from the set, so the natural value for this would be "clear".
            </summary>
        </member>
        <member name="P:MatBlazor.MatChip.Label">
            <summary>
            The chip's text.
            </summary>
        </member>
        <member name="P:MatBlazor.MatChip.Value">
            <summary>
            A user-defined value assigned to the chip.
            </summary>
        </member>
        <member name="P:MatBlazor.MatChip.IsSelected">
             <summary>
             Reflects the selection state of a choice- or filter-chip (parent chipset has either Choice or Filter set to true).
            
             When you set this in markup, it pre-selects the chip.
             </summary>
        </member>
        <member name="P:MatBlazor.MatChip.IsSelectedChanged">
            <summary>
            Allows two-way binding of IsSelected
            </summary>
        </member>
        <member name="P:MatBlazor.MatChip.IsCheckable">
            <summary>
            Checkable chips show a check-mark when selected
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatDatePickerInternal`1">
            <summary>
            Material Design Datetime picker for Blazor
            </summary>
            <typeparam name="TValue">DateTime, DateTime?</typeparam>
        </member>
        <member name="T:MatBlazor.FlatpickrOptions">
            <summary>
            The options from https://flatpickr.js.org/options/
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatDialog">
            <summary>
            Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatDialog.IsOpenChanged">
            <summary>
            Event occurs when the dialog is opened or closed.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatDialog.CanBeClosed">
            <summary>
            Indicates if the user is able to close the dialog via Escape or click on the Scrim.
            </summary>
        </member>
        <member name="T:MatBlazor.MatDivider">
            <summary>
            MatDivider is a component that allows for Material styling of a line separator with various orientation options. 
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatDrawer">
            <summary>
            The navigation drawer slides in from the left and contains the navigation destinations for your app.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatFAB">
            <summary>
            A floating action button represents the primary action in an application.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatFileUpload.Accept">
            <summary>
            HTML input accept attribute.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatHidden">
            <summary>
            Quickly and responsively toggle the visibility value of components and more with our hidden utilities.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatIconButton">
            <summary>
            Icons are appropriate for buttons that allow a user to take actions or make a selection, such as adding or removing a star to an item.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Icon">
            <summary>
            Default Button Icon
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Target">
            <summary>
            Target of Link when clicked.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.ToggleIcon">
            <summary>
            Icon to use when Button is clicked
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Link">
            <summary>
            Navigate to this url when clicked.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.ForceLoad">
            <summary>
            Force browser to redirect outside component router-space.
            </summary>
            
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Disabled">
            <summary>
            Button is disabled.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Command">
            <summary>
             Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.CommandParameter">
            <summary>
             Command parameter.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.OnClick">
            <summary>
             Event occurs when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.OnClickStopPropagation">
            <summary>
            Stop propagation of the OnClick event
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatIcon">
            <summary>
            Makes it easier to use vector-based icons in your app.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatList">
            <summary>
            Lists present multiple line items vertically as a single continuous element. 
            </summary>
        </member>
        <member name="M:MatBlazor.BaseMatList.GetSelectedIndex">
            <summary>
            Gets the index of the selected item in the list.
            </summary>
            <returns>The index.</returns>
        </member>
        <member name="M:MatBlazor.BaseMatList.SetSelectedIndex(System.Int32)">
            <summary>
            Sets the selected item in the list by index.
            </summary>
            <param name="index">The index of the item to select.</param>
        </member>
        <member name="T:MatBlazor.BaseMatListItem">
            <summary>
            Lists present multiple line items vertically as a single continuous element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatListItem.Href">
            <summary>
            The URL of the List Item
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatListItem.Disabled">
            <summary>
            List Item is disabled.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatMenu">
            <summary>
            Menus display a list of choices on a transient sheet of material.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatNavItem">
            <summary>
            Nav Item is a menu item in the Nav Menu. Inherits from Mat List Item.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNavItem.Command">
            <summary>
             Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNavItem.ForceLoad">
            <summary>
            Force browser to redirect outside component router-space.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNavItem.CommandParameter">
            <summary>
             Command parameter.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNavItem.Target">
            <summary>
            *Not yet functional - Target of Href when clicked.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNavItem.Title">
            <summary>
            The title shown.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNavItem.NavLinkMatch">
            <summary>
             NavLinkMatch parameter used to determine the active state of the Nav Item.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNavItem.AllowSelection">
            <summary>
            Specifies weather you the Nav Item can be selected / active.
            </summary>
        </member>
        <member name="M:MatBlazor.BaseMatNavItem.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
             OnClickHandler parameter.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatNavMenu">
            <summary>
            MatNavMenu provides a navigation container
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatNavSubMenu">
            <summary>
            MatNavSubMenu provides an expandable panel for child navigation lists.
            </summary>
        </member>
        <member name="T:MatBlazor.IMatNavSubMenuToggler">
            <summary>
            Defines interface for a container component that
            can toggle the expansion state of its sub menus.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatNumericUpDownFieldInternal`1">
            <summary>
            Material Design NumericUpDown for Blazor, text fields allow users to input, edit, and select text.
            </summary>
            <typeparam name="TValue">sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, decimal?</typeparam>
        </member>
        <member name="T:MatBlazor.BaseMatPaper">
            <summary>
            Basic component where the physical properties of paper are translated to the screen.
            Used for creating sections and giving more focus to some parts of the application.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatPaper.Elevation">
            <summary>
            Level of the Elevation. 
            From 0 to 24.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatPaper.Outlined">
            <summary>
            Uses outlined surface. If true, removes Elevation.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatPaper.Rounded">
            <summary>
            Uses round border.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatProgressBar">
            <summary>
            Progress indicators display the length of a process or express an unspecified wait time.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatProgressCircle">
            <summary>
            Circular Progress indicator displays the length of a process or express an unspecified wait time.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatProgressCircle.Indeterminate">
            <summary>
            Toggles the component between the determinate and indeterminate state.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatProgressCircle.Closed">
             <summary>
            If true, Puts the component in the closed state.
             </summary>
        </member>
        <member name="P:MatBlazor.BaseMatProgressCircle.Size">
            <summary>
            Sets the size of the circular progress bar.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatProgressCircle.Progress">
            <summary>
            Sets the progress bar to this value. Value should be between [0, 1].
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatProgressCircle.FourColored">
            <summary>
            IF true, Applies four animated stroke-colors to the indeterminate indicator. Applicable to the indeterminate variant only and overrides any single color currently set.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatRadioButtonInternal`1">
            <summary>
            Buttons communicate an action a user can take. They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars.
            </summary>
            <typeparam name="TValue">any</typeparam>
        </member>
        <member name="T:MatBlazor.BaseMatRadioGroupInternal`1">
            <summary>
            
            </summary>
            <typeparam name="TValue">any</typeparam>
        </member>
        <member name="T:MatBlazor.BaseMatRipple">
            <summary>
            Ripples are visual representations used to communicate the status of a component or interactive element. 
            </summary>
        </member>
        <member name="T:MatBlazor.BaseCoreMatSelect`2">
            <summary>
            Selects allow users to select from a single-option menu. It functions as a wrapper around the browser's native select element.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatSlider`1">
            <summary>
            Material Design Slider for Blazor. Sliders let users select from a range of values by moving the slider thumb.
            </summary>
            <typeparam name="TValue">sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, decimal?</typeparam>
        </member>
        <member name="P:MatBlazor.BaseMatSlider`1.Immediate">
            <summary>
            When set to true, any change to the slider immediately changes the value.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatSlideToggle`1">
            <summary>
            Material Design SlideToggle for Blazor. Component for on/off control that can be toggled via clicking or dragging.
            </summary>
            <typeparam name="TValue">bool, bool?</typeparam>
        </member>
        <member name="T:MatBlazor.BaseMatSnackbar">
            <summary>
            Snackbars provide brief messages about app processes at the bottom of the screen.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatSnackbar.Stacked">
            <summary>
            Positions the action buttons below the label instead of alongside it.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatSnackbar.Leading">
             <summary>
             Displays the snackbar on the "leading edge" of the screen (the left side in LTR, or the right side in RTL). 
            
             By default, snackbars are centered horizontally within the viewport. On larger screens, they can optionally be displayed on the leading edge by setting this property.
             </summary>
        </member>
        <member name="P:MatBlazor.BaseMatSnackbar.IsOpen">
            <summary>
            Controls whether or not the snackbar is shown.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatSnackbar.Timeout">
            <summary>
            Timeout in ms after which the snackbar closes itself. Default: 10000 ms
            To leave the snackbar open indefinitely set the timeout to -1
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatSnackbar.IsOpenChanged">
            <summary>
            This event is raised whenever IsOpen changes.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatSortHeader">
            <summary>
            The MatSortHeader and MatSortHeaderRow are used, respectively, to add sorting state and display to tabular data.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatTabBar">
            <summary>
            WARNING: In Development progress
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatTable`1">
            <summary>
            Mat Table display a table data.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.HeaderRowClass">
            <summary>
            Specifies a custom class for the MatTableHeader row
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.RowClass">
            <summary>
            Specifies a custom class for the MatTableRow
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.AllowSelection">
            <summary>
            Specifies weather you can select a single row.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.RequestApiOnlyOnce">
            <summary>
            Specifies whether to Request the API only once.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.DebounceMilliseconds">
            <summary>
            Specifies the delay duration between user input on the Search Term Field. Default 800
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.FilterByColumnName">
            <summary>
            Specifies which column is used for the filter / search term. If this is populated the Search Textbox will be visible.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.SearchTermFieldLabel">
            <summary>
            Specifies the Label for the Filter / Search Term  Textbox
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.SearchTermFieldPlaceHolder">
            <summary>
            Specifies the Placeholder for the Filter / Search Term  Textbox
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.LoadInitialData">
            <summary>
            Specifies where to Load the Initial Table Data
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.ApiUrl">
            <summary>
            Specifies the API Url form for the table data
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.ShowPaging">
            <summary>
            Specifies the Paging visibility - does not disable paging.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.ShowFooter">
            <summary>
            Specifies the Table Footer visibility.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.Striped">
            <summary>
            Determines if table has alternating color rows.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.PageSize">
            <summary>
            The number of rows per page.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.CurrentPage">
            <summary>
            The current page, starting from one.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable`1.OnRowDbClick">
            <summary>
            Action to execute on row item
            </summary>
        </member>
        <member name="T:MatBlazor.BaseTableRow`1">
            <summary>
            Mat Table Row display a table row   
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatTabGroup">
            <summary>
            MatTabGroup organize content into separate views where only one view can be visible at a time. Each tab's label is shown in the tab header and the active tab's label is designated with the animated ink bar.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatInputTextComponent`1.ReadOnly">
            <summary>
            When true, it specifies that an input field is read-only.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatInputTextComponent`1.InputClass">
            <summary>
            Css class of input element
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatInputTextComponent`1.InputStyle">
            <summary>
            Style attribute of input element
            </summary>
        </member>
        <member name="T:MatBlazor.MatTextField`1">
            <summary>
            Material Design Text Field for Blazor. Text fields allow users to input, edit, and select text.
            </summary>
            <typeparam name="TValue">string, sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, decimal?, DateTime, DateTime?, bool, bool?</typeparam>
        </member>
        <member name="T:MatBlazor.BaseMatThemeProvider">
            <summary>
            The Material Design color system can be used to create a color theme that reflects your brand or style.
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.Primary">
            <summary>
            The theme primary color
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.Secondary">
            <summary>
            The theme secondary color
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.Background">
            <summary>
            The theme background color
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.Surface">
            <summary>
            The theme surface color
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.OnPrimary">
            <summary>
            Text color on top of a primary background
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.OnSecondary">
            <summary>
            Text color on top of a secondary background
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.OnSurface">
            <summary>
            Text color on top of a surface background
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatToastContainer">
            <summary>
            Toasts provide brief notifications or messages about app processes
            </summary>
        </member>
        <member name="T:MatBlazor.IMatToaster">
            <inheritdoc />
            <summary>
            Represents an instance of the MatToaster engine
            </summary>
        </member>
        <member name="P:MatBlazor.IMatToaster.Toasts">
            <summary>
            The current list of toasts (either displayed or waiting to be shown)
            </summary>
        </member>
        <member name="P:MatBlazor.IMatToaster.Configuration">
            <summary>
            The global <see cref="T:MatBlazor.MatToastConfiguration"/> 
            </summary>
        </member>
        <member name="E:MatBlazor.IMatToaster.OnToastsUpdated">
            <summary>
            An event raised when the list of toasts changes or a global configuration setting is modified
            </summary>
        </member>
        <member name="M:MatBlazor.IMatToaster.Add(System.String,MatBlazor.MatToastType,System.String,System.String,System.Action{MatBlazor.MatToastOptions})">
            <summary>
            Displays a toast with the specified <see cref="T:MatBlazor.MatToast" />
            </summary>
            <param name="message">The toast main message</param>
            <param name="type">The optional toast <see cref="T:MatBlazor.MatToastType"/></param>
            <param name="title">The optional toast tile</param>
            <param name="icon">The optional toast icon</param>
            <param name="configure">An action for configuring a <see cref="T:MatBlazor.MatToastOptions"/> instance already containing the globally configured settings</param>
        </member>
        <member name="M:MatBlazor.IMatToaster.Clear">
            <summary>
            Hides all the toasts, including the ones waiting to be displayed
            </summary>
        </member>
        <member name="M:MatBlazor.IMatToaster.Remove(MatBlazor.MatToast)">
            <summary>
            Hides the specified <see cref="T:MatBlazor.MatToast"/>
            </summary>
            <param name="matToast">The <see cref="T:MatBlazor.MatToast"/> to be hidden</param>
        </member>
        <member name="T:MatBlazor.BaseMatToastItem">
            <summary>
            Toasts provide brief notifications or messages about app processes
            </summary>
        </member>
        <member name="T:MatBlazor.MatToast">
            <inheritdoc />
            <summary>
            Represents an instance of a Toast
            It handles the user interactions and orchestrates the state transitions
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatTooltip">
            <summary>
            The Material tooltip provides a text label that is displayed when the user hovers an element.
            </summary>
        </member>
        <member name="T:MatBlazor.MatTreeView`1">
            <summary>
            Renders the data as a tree.
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="P:MatBlazor.MatTreeView`1.RootNode">
            <summary>
            The root node to be displayed in the tree
            One of the following must be supplied <see cref="P:MatBlazor.MatTreeView`1.RootNode"/> or <see cref="P:MatBlazor.MatTreeView`1.RootNodes"/> (but NOT BOTH)
            </summary>
        </member>
        <member name="P:MatBlazor.MatTreeView`1.RootNodes">
            <summary>
            All the root nodes displayed in the tree
            One of the following must be supplied <see cref="P:MatBlazor.MatTreeView`1.RootNode"/> or <see cref="P:MatBlazor.MatTreeView`1.RootNodes"/> (but NOT BOTH)
            </summary>
        </member>
        <member name="P:MatBlazor.MatTreeView`1.MinItemHeight">
            <summary>
            Optional, sets the min height of tree view item in pixels. Use zero to always fit to content.
            </summary>
        </member>
        <member name="P:MatBlazor.MatTreeView`1.SelectedNode">
            <summary>
            The selected item in the tree
            (Optional - default null)
            </summary>
        </member>
        <member name="P:MatBlazor.MatTreeView`1.NodeTemplate">
            <summary>
            The template used to render the Node
            (Required)
            </summary>
        </member>
        <member name="P:MatBlazor.MatTreeView`1.GetChildNodesCallback">
            <summary>
            A function that gets all the child nodes for a given parentNode.
            If lazy loading is supported and the child nodes have not yet been 
            loaded then it should return null.
            (Required)
            </summary>
            <remarks>
            The function should return a collection of child nodes.
               
            This function maybe called many times for a given node.
            
            Loading on Demand
            If Lazy loading is supported and the child nodes have not been loaded
            then it should return null. 
            If null is returned then <see cref="P:MatBlazor.MatTreeView`1.LoadChildNodesCallback"/> will be called to 
            get the child nodes, to it must have been set.
            </remarks>
            <example><![CDATA[
            <MatTreeView TNode="MyTreeNode"
                        GetChildNodesCallback="@GetChildNodes" />
            ...
            @code {
                private IEnumerable<MyTreeNode> GetChildNodes(MyTreeNode parentNode)
                {
                    if (parentNode.AreChildrenLoaded == false)
                        return null; // LoadChildrenCallbackAsync will be called to load the child nodes
                        
                    return parentNode.Nodes;
                }
            }        
            ]]></example>
        </member>
        <member name="P:MatBlazor.MatTreeView`1.LoadChildNodesCallback">
            <summary>
            A function to lazy load child nodes. Only required if lazy loading / load on demand
            is used. 
            (Optional - unless <see cref="P:MatBlazor.MatTreeView`1.GetChildNodesCallback"/> returns null)
            </summary>
            <remarks>
            This function is called when <see cref="P:MatBlazor.MatTreeView`1.GetChildNodesCallback"/> returns null. 
            This causes this function to be called which should load all the child nodes.
            The callback is asynchronous and should return when the values have been loaded.
            
            If an error occurs during the loading, then throw an exception (the exceptions message
            will be shown in the UI). The function many be called again for the same node in order
            to re-try.
            </remarks>
            <example><![CDATA[
            <MatTreeView TNode="MyTreeNode"
                        GetChildNodesCallback="@GetChildNodes" 
                        LoadChildNodesCallback="@LoadChildNodesAsync" />
            ...
            @code {
                private IEnumerable<MyTreeNode> GetChildNodes(MyTreeNode parentNode)
                {
                    if (parentNode.AreChildrenLoaded == false)
                        return null; // LoadChildrenCallbackAsync will be called to load the child nodes
                        
                    return parentNode.Nodes;
                }
                
                private Task<IEnumerable<MyTreeNode>> LoadChildNodesAsync(MyTreeNode parentNode)
                {
                    if (parentNode.AreChildrenLoaded == false)
                    {
                        await parentNode.Nodes = MyWebApi.GetChildNodes(parentNode.ID);
                    }
                        
                    return parentNode.Nodes;
                }        
            }        
            ]]></example>        
        </member>
        <member name="P:MatBlazor.MatTreeView`1.IsNodeExpandedCallback">
            <summary>
            A function that indicates if the given node is expanded or collapsed.
            (Optional - if null then the expanded/collapsed state is managed by the <see cref="T:MatBlazor.MatTreeView`1"/>)
            </summary>
            <example><![CDATA[
            <MatTreeView TNode="MyTreeNode"
                        IsNodeExpandedCallback="@((myTreeNode)=>myTreeNode.IsExpanded)" />
            
            or 
            
            <MatTreeView TNode="MyTreeNode"
                        IsNodeExpandedCallback="@IsExpanded" />
            ...
            @code {
                private bool IsExpanded(MyTreeNode myTreeNode)
                {
                    return myTreeNode.IsExpanded;
                }
            }
            ]]></example>
        </member>
        <member name="P:MatBlazor.MatTreeView`1.ExpandStateChanged">
            <summary>
            An event raised when the expanded state of a node changes
            </summary>
        </member>
        <member name="P:MatBlazor.MatTreeView`1.SelectedNodeChanged">
            <summary>
            An event raised when the selected node changes
            </summary>
        </member>
        <member name="M:MatBlazor.MatTreeView`1.EnsureSelectedNodeIsVisible">
            <summary>
            Ensures that the selected node is visible, if its not then the
            selection is moved to the first visible ancestor.
            If no ancestors exist then its set to null
            </summary>
            <returns></returns>
        </member>
        <member name="T:MatBlazor.LoadChildNodesDelegate`1">
            <summary>
            Callback used to Lazy Load child nodes
            </summary>
            <typeparam name="TNode">The node type</typeparam>
            <param name="parentNode">The node to load the child nodes for</param>
            <returns>All the child nodes (should not return null)</returns>
            <exception cref="T:System.Exception">Throws if the data could not be loaded - the exceptions message will be displayed to the user</exception>
        </member>
        <member name="T:MatBlazor.GetChildNodesDelegate`1">
            <summary>
            A Callback used to get the child nodes for a given node
            </summary>
            <typeparam name="TNode">The node type</typeparam>
            <param name="parentNode">The node to get the child nodes for</param>
            <returns>The child nodes (if they are loaded) or null if they are not loaded and lazy loading is being used.</returns>
        </member>
        <member name="T:MatBlazor.IsNodeExpandedDelegate`1">
            <summary>
            A Callback used to determine if a node should be expanded or collapsed
            </summary>
            <typeparam name="TNode">The node type</typeparam>
            <param name="parentNode">The node we want to know the expanded state for</param>
            <returns>The expanded state of the node</returns>
        </member>
        <member name="T:MatBlazor.ExpandedStateChangedArgs`1">
            <summary>
            Event arguments passed when a node expanded state changes
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="P:MatBlazor.ExpandedStateChangedArgs`1.Node">
            <summary>
            The node that's expanded state has changed
            </summary>
        </member>
        <member name="P:MatBlazor.ExpandedStateChangedArgs`1.NewState">
            <summary>
            the new expanded state
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatVirtualScroll`1">
            <summary>
            The VirtualScroll for Blazor displays large lists of elements performantly by only rendering the items that fit on-screen.
            Loading hundreds of elements can be slow in any browser; virtual scrolling enables a performant way to simulate all items being rendered by making the height of the container element the same as the height of total number of elements to be rendered, and then only rendering the items in view.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:MatBlazor.LinqExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:MatBlazor.LinqExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurrence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="T:MatBlazor.MatToastCommonOptions">
            <summary>
            The common options for MatToaster
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.Class">
            <summary>
            The main toast class. Defaults to <see cref="M:MatBlazor.MatToastClasses.#ctor"/>
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.MaximumOpacity">
            <summary>
            The maximum opacity expressed as an integer percentage for a toast in the Visible state. Defaults to 80% where 0 means completely hidden and 100 means solid color.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ShowTransitionDuration">
            <summary>
            How long the showing transition takes to bring a toast to the MaximumOpacity and set it to the Visible state. Defaults to 500 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ShowStepDuration">
            <summary>
            Interval between component repaint during the showing transition. Defaults to 100 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.VisibleStateDuration">
            <summary>
            How long the toast remain visible without user interaction. Defaults to 5000 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.HideTransitionDuration">
            <summary>
            How long the hiding transition takes to make a toast disappear. Defaults to 500 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.HideStepDuration">
            <summary>
            Interval between component repaint during the hiding transition. Defaults to 100 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ShowProgressBar">
            <summary>
            States if a progress bar has to be shown during the toast Visible state. Defaults to true.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ProgressBarStepDuration">
            <summary>
            Interval between component repaint during the Visible state: it's used only if ShowProgressBar is true. Defaults to 50 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ShowCloseButton">
            <summary>
            States if the close button has to be used for hiding a toast. The button presence disables the default "hide on click" behavior. Defaults to true.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.CloseIcon">
            <summary>
            The css class for the close icon. Defaults to <see cref="F:MatBlazor.MatToastClasses.CloseIcon"/>.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.RequireInteraction">
            <summary>
            When true it disables the auto hiding and forces the user to interact with the toast for closing it. Defaults to false.
            </summary>
        </member>
        <member name="T:MatBlazor.MatToastConfiguration">
            <summary>
            Represents the global <see cref="T:MatBlazor.MatToastConfiguration"/> instance
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastConfiguration.NewestOnTop">
            <summary>
            Drives the toast display sequence: when true the newest displayable toast will be on top. Otherwise it will be on the bottom. Defaults to true.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastConfiguration.PreventDuplicates">
            <summary>
            When true, a new toast with the same type, title and message of an already present toast will be ignored. Defaults to true.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastConfiguration.MaxDisplayedToasts">
            <summary>
            The maximum number of toasts to be displayed at the same time. Defaults to 5
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastConfiguration.Position">
            <summary>
            The css class driving the toast position in the screen. The predefined positions are contained in <see cref="T:MatBlazor.MatToastPosition"/>. Defaults to <see cref="F:MatBlazor.MatToastPosition.TopRight"/>
            </summary>
        </member>
        <member name="M:MatBlazor.MatToastExtension.AddMatToaster(Microsoft.Extensions.DependencyInjection.IServiceCollection,MatBlazor.MatToastConfiguration)">
            <summary>
            Adds a singleton <see cref="T:MatBlazor.IMatToaster"/> instance to the DI <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> with the specified <see cref="T:MatBlazor.MatToastConfiguration"/>
            </summary>
        </member>
        <member name="M:MatBlazor.MatToastExtension.AddMatToaster(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a singleton <see cref="T:MatBlazor.IMatToaster"/> instance to the DI <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> with the default <see cref="T:MatBlazor.MatToastConfiguration"/>
            </summary>
        </member>
        <member name="M:MatBlazor.MatToastExtension.AddMatToaster(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MatBlazor.MatToastConfiguration})">
            <summary>
            Adds a singleton <see cref="T:MatBlazor.IMatToaster"/> instance to the DI <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> with an action for configuring the default <see cref="T:MatBlazor.MatToastConfiguration"/>
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastOptions.Onclick">
            <summary>
            The async <see cref="T:System.Func`2"/> to be called on user click
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastOptions.Type">
            <summary>
            The <see cref="P:MatBlazor.MatToastOptions.Type"/>
            </summary>
        </member>
        <member name="P:MatBlazor.MatNavSubMenuHeader.Title">
            <summary>
            The title shown.
            </summary>
        </member>
        <member name="P:MatBlazor.MatTable`1.MatTableHeader">
            <summary>
            The table header
            </summary>
        </member>
        <member name="P:MatBlazor.MatTable`1.UseSortHeaderRow">
            <summary>
            Allows the header row to be sorted
            </summary>
        </member>
        <member name="P:MatBlazor.MatTable`1.MatTableRow">
            <summary>
            Renders the list of items within the table
            </summary>
        </member>
        <member name="P:MatBlazor.MatTable`1.PageSizes">
            <summary>
            Not Functioning
            </summary>
        </member>
        <member name="P:MatBlazor.MatTable`1.Items">
            <summary>
            Specifies the data for the table.
            </summary>
        </member>
    </members>
</doc>
